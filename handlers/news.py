from aiogram import Router, types, F
from db.connector import get_db_connection
from keyboards.inline import main_kb

router = Router()

@router.callback_query(F.data == "news")
async def handle_news(callback: types.CallbackQuery):
    await callback.answer()
    tg_id = callback.from_user.id

    conn = get_db_connection()
    try:
        with conn.cursor() as cur:
            # 1) –ß–∏—Ç–∞–µ–º –º–∞—Å—Å–∏–≤ —Ñ–∏–ª—å—Ç—Ä–∞ (TEXT[])
            cur.execute(
                "SELECT filter FROM users WHERE telegram_id = %s",
                (tg_id,)
            )
            row = cur.fetchone()
            tickers = row[0] or []  # –µ—Å–ª–∏ NULL ‚Äî –ø–æ–ª—É—á–∏–º []

            # 2) –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∫–∞–∑–∞–ª —Ç–∏–∫–µ—Ä—ã ‚Äî –ø—Ä–æ–≤–µ—Ä—è–µ–º equality ANY(),
            #    –∏–Ω–∞—á–µ ‚Äî –æ—Ç–¥–∞–µ–º –≤—Å–µ –Ω–æ–≤–æ—Å—Ç–∏
            if tickers:
                cur.execute(
                    """
                    SELECT text
                    FROM news
                    WHERE ticker = ANY(%s)
                    ORDER BY id DESC
                    LIMIT 10
                    """,
                    (tickers,)
                )
            else:
                cur.execute(
                    """
                    SELECT text
                    FROM news
                    ORDER BY id DESC
                    LIMIT 10
                    """
                )
            rows = cur.fetchall()
    finally:
        conn.close()

    # 3) –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç—ã
    if not rows:
        await callback.message.answer(
            "–ü–æ–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ—Ç üòî",
            reply_markup=main_kb
        )
        return

    for (text,) in rows:
        await callback.message.answer(text)

    await callback.message.answer(
        "–≠—Ç–æ –≤—Å–µ –Ω–æ–≤–æ—Å—Ç–∏.",
        reply_markup=main_kb
    )