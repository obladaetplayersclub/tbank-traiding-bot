from aiogram import Router, types, F
from db.connector import get_db_connection
from keyboards.inline import main_kb

router = Router()

@router.callback_query(F.data == "news")
async def handle_news(callback: types.CallbackQuery):
    await callback.answer()
    conn = get_db_connection()
    try:
        with conn.cursor() as cur:
            # –ë–µ—Ä—ë–º, –Ω–∞–ø—Ä–∏–º–µ—Ä, 10 —Å–∞–º—ã—Ö —Å–≤–µ–∂–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
            cur.execute("""
                SELECT title, content, published_time
                FROM news
                ORDER BY published_time DESC
                LIMIT 10
            """)
            rows = cur.fetchall()
    finally:
        conn.close()

    if not rows:
        return await callback.message.answer(
            "–ü–æ–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ—Ç üòî", reply_markup=main_kb
        )

    for title, summary, published_at in rows:
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
        ts = published_at.strftime("%d.%m.%Y %H:%M")
        # –°–æ—Å—Ç–∞–≤–ª—è–µ–º Markdown-—Å–æ–æ–±—â–µ–Ω–∏–µ
        text = (
            f"*{title}*\n"
            f"_{ts}_\n\n"
            f"{summary}\n\n"
        )
        await callback.message.answer(text, parse_mode="Markdown")

    await callback.message.answer("–≠—Ç–æ –≤—Å–µ –Ω–æ–≤–æ—Å—Ç–∏.", reply_markup=main_kb)