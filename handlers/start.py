import logging
from aiogram import Router, types, F
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from sqlalchemy.dialects.postgresql import insert

from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

from states.start import StartSurvey
from keyboards.inline import trader_kb, interval_kb, main_kb
from db.connector import engine, users

router = Router()


# 1) –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ç–µ–º –∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:
TOPICS = [
    ("financial_reporting", "–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç—å"),
    ("dividends",            "–î–∏–≤–∏–¥–µ–Ω–¥—ã"),
    ("ipo",                  "IPO"),
    ("m_and_a",              "M&A"),
    ("regulation",           "–†–µ–≥—É–ª—è—Ç–æ—Ä–∏–∫–∞"),
    ("macro",                "–ú–∞–∫—Ä–æ—ç–∫–æ–Ω–æ–º–∏–∫–∞"),
    ("new_products",         "–ù–æ–≤—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã"),
    ("partnerships",         "–ü–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–∞"),
    ("litigations",          "–°—É–¥–µ–±–Ω—ã–µ —Ä–∞–∑–±–∏—Ä–∞—Ç–µ–ª—å—Å—Ç–≤–∞"),
    ("ecology",              "–°–æ–±—ã—Ç–∏—è —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —ç–∫–æ–ª–æ–≥–∏–µ–π"),
    ("leadership_changes",   "–ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤ —Å–æ—Å—Ç–∞–≤–µ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π –∫–æ–º–ø–∞–Ω–∏–∏"),
]
CONFIRM = "topics_confirm"


# 2) –ó–¥–µ—Å—å –∂–µ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º build_topics_kb:
def build_topics_kb(selected: set[str]) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.row_width = 1  # –∏–ª–∏ 2, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∂–µ–ª–∞–µ–º–æ–≥–æ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è
    for key, label in TOPICS:
        prefix = "‚úÖ " if key in selected else ""
        builder.button(text=prefix + label, callback_data=f"topic:{key}")
    builder.button(text="üöÄ –ì–æ—Ç–æ–≤–æ", callback_data=CONFIRM)
    return builder.as_markup()


# 3) –ò —Ç–µ–ø–µ—Ä—å —É–∂–µ –≤—Å–µ —Ö—ç–Ω–¥–ª–µ—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞ —ç—Ç–æ –æ–ø–∏—Ä–∞—é—Ç—Å—è:
@router.message(CommandStart())
async def cmd_start(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n–ö–∞–∫–æ–π –≤—ã —Ç—Ä–µ–π–¥–µ—Ä?",
        reply_markup=trader_kb
    )
    await state.set_state(StartSurvey.choosing_trader_type)


@router.callback_query(StartSurvey.choosing_trader_type)
async def process_trader_type(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.update_data(trader_type=callback.data)
    await callback.message.edit_text(
        "–ö–∞–∫ —á–∞—Å—Ç–æ (–≤ –º–∏–Ω—É—Ç–∞—Ö) –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏?",
        reply_markup=interval_kb
    )
    await state.set_state(StartSurvey.choosing_news_frequency)


@router.callback_query(StartSurvey.choosing_news_frequency)
async def process_news_frequency(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    interval = int(callback.data)
    await state.update_data(news_interval=interval)

    data = await state.get_data()
    selected = set(data.get("topics", []))
    await callback.message.edit_text(
        "–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç? –í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—É–Ω–∫—Ç–æ–≤:",
        reply_markup=build_topics_kb(selected)
    )
    await state.set_state(StartSurvey.choosing_topics)


@router.message(StartSurvey.choosing_news_frequency)
async def process_custom_interval(message: types.Message, state: FSMContext):
    text = message.text.strip()
    if not text.isdigit() or int(text) <= 0:
        return await message.answer("‚ùó –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.")
    await state.update_data(news_interval=int(text))

    data = await state.get_data()
    selected = set(data.get("topics", []))
    await message.answer(
        "–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç? –í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—É–Ω–∫—Ç–æ–≤:",
        reply_markup=build_topics_kb(selected)
    )
    await state.set_state(StartSurvey.choosing_topics)


@router.callback_query(lambda c: c.data.startswith("topic:"), StartSurvey.choosing_topics)
async def toggle_topic(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    data = await state.get_data()
    selected = set(data.get("topics", []))
    key = callback.data.split(":", 1)[1]

    if key in selected:
        selected.remove(key)
    else:
        selected.add(key)

    await state.update_data(topics=list(selected))
    await callback.message.edit_reply_markup(
        reply_markup=build_topics_kb(selected)
    )


@router.callback_query(lambda c: c.data == CONFIRM, StartSurvey.choosing_topics)
async def confirm_topics(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    data = await state.get_data()
    topics = data.get("topics", [])
    if not topics:
        return await callback.message.answer("‚ùó –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ç–µ–º—É.")

    tg_id = callback.from_user.id
    stmt = insert(users).values(
        telegram_id   = tg_id,
        trader_type   = data["trader_type"],
        news_interval = data["news_interval"],
        event_type    = topics
    )
    upsert = stmt.on_conflict_do_update(
        index_elements=[users.c.telegram_id],
        set_={
            "trader_type":   stmt.excluded.trader_type,
            "news_interval": stmt.excluded.news_interval,
            "event_type":    stmt.excluded.event_type,
        }
    )
    with engine.begin() as conn:
        conn.execute(upsert)

    await state.clear()
    await callback.message.edit_text(
        "‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!\n–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=main_kb
    )